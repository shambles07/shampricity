#!/bin/zsh
#-----------------------------------------------------------------------#
#                                                                       #
# These functions have been created by Rob Ladendorf (rioted@gmail.com) #
#                                                                       #
#-----------------------------------------------------------------------#

function winfunc()
{
	ps -aeW | awk '{$1=$2=$3=$4=$5=$6=$7="";}/C:\\/{print $0}' | sed 's/\       //g;s/^..\ //g' | sort
}
function 2func()
{
	winfunc |  awk '{ print $0"\n" }' | less -R
}
function eanniversary()
{
	ANNI=1474101800 ; date --date="@$ANNI"
	TIMETIL=$(echo $(( $ANNI - $(date +%s) )) | sed 's/[-]//g')
	printf "\n" ; figlet -c -t -f 4max $( echo "DATING " $(( ${TIMETIL} / 24 / 60 / 60 )) ) DAYS ; print "\n"	
}
function inobit() # GET ALL OBITS FOR THE STATE
{
	curl -s "http://www.legacy.com/ns/obitfinder/obituary-search.aspx?Page=1&countryid=1&daterange=Last3Days&stateid=0&keyword=&entriesperpage=1000" | grep -o 'target="_blank">\(.*\)<' | sed 's/target="_blank">//g;s/[<]//g' | sort # | grep -v -e img -e July -e '^[[:digit:]]'
	#curl -s http://www.legacy.com/obituaries/nwitimes/browse | sed 's/{/\n/g' | grep -i 'firstname' | cut -d '"' -f1-8 | sed 's/"/ /g' | awk '{ print $3, $7 }' | sort -k2
}
function rmlns() # REMOVE ALL BLANK LINES
{
	grep -v "^$"
}

function ffind() # FIND (CASE INSENSITIVE) FROM ROOT EXCLUDING CYGDRIVE
{
	 /usr/bin/find / -xdev -depth | grep -i "$1"
}
function gfind() # FIND (CASE INSENSITIVE) FROM ROOT EXCLUDING CYGDRIVE
{
	find / -xdev -depth | grep -i "$1"
}
function spaceprice()
{
	curl -s http://pastebin.com/raw/wSbNGdDw | grep -A 10 -e 'Stock' -e "^\[" | grep -v "SpaceCrystal" | tail -n+15
}
function space()
{
	curl -s http://pastebin.com/raw/wSbNGdDw | grep '^\[' | sed 's/\]//g;s/\[//g' | grep -v 'All products' | sed 's/[//,]/ /g' | awk '{ print $1 }' | /usr/bin/sort.exe
}
#function pathfix() # FIX A PATH FOR CMD
# {
#	# FOR ROOT DRIVES
#	if [[ "${PWD}" == "/cygdrive/c" ]]; then
#		echo "${PWD}" | /usr/bin/sed 's|/cygdrive/c|C:\\|g'
#	elif [[ "${PWD}" == "/cygdrive/h" ]]; then
#		echo "${PWD}" | /usr/bin/sed 's|/cygdrive/h/|H:\\|g'
#	# FOR ALL OTHER SUBFOLDERS
#	elif [[ "${PWD}" =~ "/cygdrive/c/.*" ]]; then
#		echo "${PWD}" | /usr/bin/sed 's|/cygdrive/c/|C:/|g;s/\//\\/g'
#	elif [[ "${PWD}" =~ "/cygdrive/h/.*" ]]; then
#		echo "${PWD}" | /usr/bin/sed 's|/cygdrive/h/|H:/|g;s/\//\\/g'
#	else
#	# FOR ANY FOLDERS IN THE CYGWIN64 LIBRARY
#		echo "${PWD}" | /usr/bin/sed 's/\//\\/g;s/^/C:\\cygwin64/g'
#	fi
# }

function winexp() # OPEN WD IN WIN EXPLORER
{
	explorer.exe $(pathfix)
}

function path()
{
	echo "$PATH" | sed 's/[:]/\n/g' | sort | grep -i -v "portable"
}

function btcusd() # GET COINBASE'S CURRENT VALUE OF BTC IN USD
{
	local DATE=$(date +%D' @ '%T)
	echo -e "\n"$DATE"\n"
	bash -c /home/shambi07/.local/bin/bitcoin-prices-master/exchanges/Coinbase/api.sh && bash -c /home/shambi07/.local/bin/bitcoin-prices-master/exchanges/Coinbase/price.sh | read USD
	echo "$USD" | sed 's/.*/$& USD = 1 BTC/g'
	printf "\n"
}

function btclogger() # GET COINBASE'S CURRENT VALUE OF BTC IN USD
{
	echo -e "\n\n"
	bash -c /home/shambi07/bin/bitcoin-prices-master/exchanges/Coinbase/api.sh && bash -c /home/shambi07/bin/bitcoin-prices-master/exchanges/Coinbase/price.sh | read USD
	echo "$USD" | sed 's/.*/$& USD = 1 BTC/g'
	printf "\n"
}


# NEW FUNCTIONS FROM PASTEBIN

function wcn()
{
	wc "$@" | awk '{ print "\nFile: "$4"\n\n"$3,"Words\n"$2,"Bytes\n"$1,"Lines\n" }'
# $2,"Bytes\n"
# $1,"Newlines\n"
}

function hexer() # PRINTF THE HEXIT
{
	  printf "%s" $( hexit $1 )
}

function hexit() # CANONICAL SORTED HEXDUMP
{
	  hexdump -C $1 | awk '{ print $18 }' | sed 's/|//g' | sed 's|...||g'
}

# TESTING NEW FUNCTIONS

function squareme()
{
	echo -e "\nThis function is used to square whatever number you input. Exit using Ctrl+D/Ctrl+C.\n\n"
	awk '{ x=$0**2; print "\n\t"$1"Â² = " x"\n" }' - 2>&1 /dev/null
}

function fetchme()
{
	echo "Uptime:"
	it=( $(uptime -p | awk '/Uptime/{ $1=$2=$3=$4=$5=""; print $6,$7 }' | sed 's/\x1b//g' | sed 's|\[0m||g' | grep -o '[[:digit:]]') )
	echo ${it[1]}${it[2]} hours ${it[3]}${it[4]} minutes
}
# VIEW ALIAS/FUNCTION FILES

function short()
{
	grep -e '.*[[:alnum:]]*=' -e '.*:' --color="always" ~/.shortcuts | awk '{ print; } $NR % 1 == 0 { print ""; }' | less -R
}

function calias()
{
	awk '{ print; } $NR % 1 == 0 { print ""; }' ~/.zsh_alias | less
}

function cfunc()
{
	awk '{ print; } $NR % 1 == 0 { print ""; }' ~/.zsh_functions | less
}

# MATH HELPERS

function math() # BETTER MATH FUNCTION (LONG DECIMAL ANSWERS)
{
	bc -l<<<"$@"
}
function maths() # MATH W/O LONG DECIMALS
{
	bc -l <<< "$@" | zz
}
function nix() # REMOVES ALL DECIMAL PLACES WHEN PIPING FROM MATH
{
	sed 's/.[[:digit:]]*$//g'
}
function zz() # LEAVES ONLY 3 DECIMAL PLACES WHEN PIPING FROM MATH
{
	sed 's/.................$//g'
}

# LS COMMANDS
function lsfunc()
{
	grep -e 'function.*().*' ~/.zsh_functions --color=never | sed 's/function //g' | grep -v lsfunc | sort
}

function lsfa() # LIST ONLY HIDDEN FILES IN WD (NON-DIRS)
{
	ls -lA "$@" | grep '^[.]' | grep -v '/$' --color=never
}

function lsf() # LIST ONLY NON-HIDDEN NON-DIRS IN WD
{
	command ls "$@" | grep -v '/$'
}

function lsfd() # LIST ONLY DIRS IN WD
{
	ls -F "$@" | grep '/$'
}

function lsfad() # LIST ONLY HIDDEN DIRS IN WD
{
	ls -AF "$@" | grep '/$' | grep '^[.]' --color=never
}

function lsop() # USEFUL FOR SEARCHING FOR ALL BINARIES
{
	ls /bin /sbin /usr/bin /usr/sbin /usr/local/bin | sort | uniq | grep $1 | grep -v "[.]dll$"
}

function lsc() # LIST NO. OF FILES (INCLUDING SYMBOLIC LINKS)
{
	ls -1 "$@" | wc -l
}

function lsca() # LIST NO. OF FILES (INCLUDING HIDDEN)
{
	ls -lA "$@" | wc -l
}

# FILE MODIFICATIONS
function bak()	# CREATES A BACKUP FILE FROM STDIN
{
	for i do
	   case ${i##*/} in
	     (?*.?*) cp -iv -- "$i" "${i%.*}.bak.${i##*.}";;
	     (*) cp -iv -- "$i" "$i.bak"
	   esac
	 done
}
function pyn3()
{
	touch $1.py
	echo "#!/bin/python3.4" >> $1.py
	chmod +x $1.py
}
function pyn2()
{
	touch $1.py
	echo "#!/bin/python2.7" >> $1.py
	chmod +x $1.py
}
function cmd() # MAKE EXECUTABLE SH SCRIPT
{
	touch $1.sh
	echo "#!/bin/bash" > $1.sh
	chmod +x $1.sh
}
function debak() # RIDS WD OF ALL .BAK FILES
{
	for file in *.bak ; do cp "$file" "${file//.bak}"; rm -iv *.bak; done
}
function cpext() # COPY A FILE WITH THE DATE IN THE TITLE IN WD
{
	local TIME=$(date +%m-%d)
	local EXT=$(ls $1 | grep -o '.[[:alpha:]]*$')
	cp $1 $(ls $1 | sed 's/.[[:alpha:]]*$//g')-$TIME$EXT
	command rm -iv $1
}
function cptime()
{
	local TIME=$(date +%m-%d)
	cp $1 $1-$TIME
	command rm -iv $1
}
function linetotal() # GET TOTAL NUM OF LINES IN A FILE
{
	gawk '{ nlines++ }  END  { print nlines }'
}
function sp_ce() # REPLACE SPACES IN FILENAMES WITH _
{
	for f in *\ *; do mv "$f" "${f// /_}"; done
}
function sp-ce() # REPLACE SPACES IN FILENAMES WITH -
{
	for f in *\ *; do mv "$f" "${f// /-}"; done
}

# XDOTOOL SHORTCUTS

function nbash() # OPEN A NEW TAB IN BASH. (XDT)
{
	 xdotool key ctrl+shift+t
	 xdotool keyup ctrl+shift+t
	 xdotool type bash
	 xdotool keydown Return
	 xdotool keyup Return
	 xdotool type clear
	 xdotool key Return
	 xdotool keyup Return
}

# INFORMATION ON USEFUL TERMINAL SHORTCUTS AND FUNCTION INFORMATION

function bcuts() # LISTS COMMON TERMINAL SHORTCUTS
{
	cat /home/rob/Documents/PC-Info+Help/LinuxFiles/LinuxConfig/Shortcuts/cmdkeycuts.txt
}

# SYSTEM SHORTCUTS

function cdls() # CHANGE TO A DIRECTORY AND LIST ITS CONTENTS
{
	cd "$@"; ls
}
function cd-up() # MOVE UP THE NUMBER OF DIRS LISTED IN $1
{
	cd $(printf "%0.0s../" $(seq 1 $1))
}
function mdcd() # MAKE A DIRECTORY AND MOVE TO IT, ALSO CREATING SUBDIRECTORIES ON THE WAY
{
	mkdir -p $1 && mkdir -p $1 && cd $1
}
# MONITOR BRIGHTNESS
function slx() # CHANGE BRIGHTNESS (SLX 1-9)
{
	xrandr --output HDMI-0 --brightness $1.$2
}
# PROCESS RELATED
function my_ps() # GET PROCESSES THE USER STARTED
{
	ps -u shambi07
# -o %pid,%cpu,%mem,bsdtime,command
}
function pp() # PICK A PROCESS FROM MY_PS
{
	my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"}
}
# ARCHIVE FUNCTIONS
# RECURSIVE TARGZ+ZIP COMMANDS FOR FOLDERS
function maketar()
{
	   tar cvzf "${1%%/}.tar.gz"  "${1%%/}/";
}
function makezip()
{
	   zip -r "${1%%/}.zip" "$1" ;
}
# EXTRACTION (.tar.bz2, .tar.gz, .bz2, .rar, .gz, .tar, .tbz2, .tgz, .zip, .Z, .7z)
function exx () # EXTRACT ALMOST ANY ARCHIVE FILE
{
	 if [ -f $1 ] ; then
	   case $1 in
	     *.tar.bz2)   tar xjf $1   ;;
	     *.tar.gz)    tar xzf $1   ;;
	     *.bz2)       bunzip2 $1   ;;
	     *.rar)       unrar x $1   ;;
	     *.gz)        gunzip $1    ;;
	     *.tar)       tar xf $1    ;;
	     *.tbz2)      tar xjf $1   ;;
	     *.tgz)       tar xzf $1   ;;
	     *.zip)       unzip $1     ;;
	     *.Z)         aunpack $1   ;;
	     *.7z)        7z x $1      ;;
	     *)           echo "'$1' cannot be extracted via ex()" ;;
	   esac
	 else
	   echo "'$1' is not a valid file"
	 fi
}

# 7ZIP mc7z mx7z
function mc7z() # MAKE A HIGHLY-COMPRESSED TAR.7Z ARCHIVE
{
	tar cf - $1.tar $1 | 7za a -t7z -si -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on $1.tar.7z
}
function mx7z() # EXTRACT A TAR.7Z ARCHIVE
{
	FILENAME=$1.tar;
	7za x $FILENAME.7z;
	tar -xvf $FILENAME ; rm -f $FILENAME
}
# TARGZ targz targzview extargz tarview targzadd targzo
function gzview()
{
	fn1=$(echo $1 | sed 's|[.]gz$||g')
	fn2=$(echo $1)
	# gunzip $1
	# cat "${1%%.}"
	echo $fn1 $fn2
	echo "${1%%}.gz"
	# gzip $1
}
function targzview() # VIEW CONTENTS OF A TAR.GZ FILE

{
	gunzip $1.tar.gz
	tar -tvf $1.tar
	gzip $1.tar
}
function tarview() # VIEW CONTENTS OF TAR FILE
{
	echo "tar -tvf ${1:+.tar}"
}
function targzadd() # ADD STDIN FILE TO TAR.GZ ARCHIVE
{
	gunzip $1.tar.gz
	tar -rvf $1.tar $2
	tar -tvf $1.tar
	gzip $1.tar
}
function targz() # CREATE TARGZ ARCHIVE FROM STDIN
{
	tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"
}
function targzex() # EXTRACT ARCHIVE TO WD
{
	tar -xvzf $1.tar.gz
}
# ZIP zipit
function zipit() # CREATE ZIP ARCHIVE FROM STDIN
{
	zip -r "${1%%/}.zip" "$1"
}
# CPIO cpuse cpfind cpiowd cpiols cpview cpioex cpiowdex
function cpuse() # DESCRIBES HOW TO USE FIND WITH CPIO
{
	echo 'Usage is like this: find 'LOCATION' -(i)name "*.extension" | cpio -o > ARCHIVE.cpio'
	echo 'This will find all files starting from the LOCATION dir that use the extension and add them to a .cpio archive.'
	#find /home/shambi07/ -iname $1 | cpio -o > $2.cpio
}
function cpioall() # MAKE A CPIO ARCHIVE OF CURRENT FOLDER, REMOVING ANY SPACES FROM TITLE
{
	local TIME=`date +%m-%d`
	local BASE=`basename $PWD`
	local MACE="$(echo $BASE | sed 's/ //g')"
	title=$MACE-$TIME
	find . -depth -print | cpio -oaV > $title.cpio
	du $title.cpio
	gzip $title.cpio
	du $title.cpio.gz
}
function cpiowd() # MAKE CURRENT DIRECTORY INTO A CPIO ARCHIVE
{
	find . -depth -print0 | cpio --null -pvd $1
}
function cpiols() # USE LS TO CREATE A CPIO ARCHIVE
{
	ls | cpio -ov > $1.cpio
}
function cpview() # VIEW A CPIO ARCHIVES CONTENTS
{
	cpio -it < $1.cpio
}
function cpioex() # EXTRACT A CPIO ARCHIVE AND CONTENTS GO TO ORIGINAL DIRECTORY
{
	cpio -iv < $1.cpio
}
function cpiowdex() # EXTRACT CPIO TO WD
{
	cpio -idv --no-absolute-filenames < $1.cpio
}

# GET SUM OF FILE CONTENTS (psumof, sumof)


function psumof() # PERLS SUM OF ALL NUMBERS IN A FILE
{
	perl -nle '$sum += $_ } END { print $sum' $1
}
function sumof() # SUM USING AWK
{
	awk '{sum+=$0} END {print sum}' $1
}

# FUNCTIONS TO GET INFORMATION ON OTHER FUNCTIONS

function funcive() # LIST ARCHIVE FUNCTION TITLES
{
	grep -e '^# 7ZIP.*' -e '^# TARGZ.*' -e '^# ZIP.*' -e '^# CPIO.*' --color="never" ~/.zsh_functions | grep '^#.*' --color="never" | sort
}
function funcinfo() # GET DETAILED INFO ON ARCHIVE FUNCTIONS
{
	grep -e 'mc7z' -e 'mx7z' -e 'cpuse' -e 'cpiowd' -e 'cpiols' -e 'cpview' -e 'cpioex' -e 'cpiowdex' -e 'targz' -e 'targzview' -e 'extargz' -e 'tarview' -e 'targzadd' -e 'targzo' -e 'zipit' ~/.zsh_functions | sed 's/function //g' | sed 's/grep.*//g'
}
function exxin() # EXTRACTION FUNCTION (EXX) FILE USAGE
{
	grep '^# EXTRACTION' --color=never ~/.zsh_functions
}
function funcls() # PRINT ALL FUNCTIONS AND DEFINITIONS ALL AT ONCE
{
	grep '^function' ~/.zsh_functions | sed 's/function //g' | sort
}
function packls() # LIST ALIASES USED FOR PACKAGE MANAGEMENT
{
	awk '{ $1=""; print $0 }' ~/.zsh_alias | grep -A 19 'PACKAGE' --color="never"
}

# Colors for commands
Black="\e[0;30m"
Red="\e[0;31m"
Green="\e[0;32m"
Yellow="\e[0;33m"
Blue="\e[0;34m"
Purple="\e[0;35m"
Cyan="\e[0;36m"
White="\e[0;37m"

BBlack="\e[1;30m"
BRed="\e[1;31m"
BGreen="\e[1;32m"
BYellow="\e[1;33m"
BBlue="\e[1;34m"
BPurple="\e[1;35m"
BCyan="\e[1;36m"
BWhite="\e[1;37m"

On_Black="\e[40m"
On_Red="\e[41m"
On_Green="\e[42m"
On_Yellow="\e[43m"
On_Blue="\e[44m"
On_Purple="\e[45m"
On_Cyan="\e[46m"
On_White="\e[47m"
NC="\e[m"

# function renamesmc() {
#	printf "%s\n" * | sed "s/\ //g;s/[)]//g;s/[(]//g;s/[[]//g;s/[]]//g;s/[s/[']//g"
# }