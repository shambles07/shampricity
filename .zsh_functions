#!/bin/zsh
#-----------------------------------------------------------------------#
#                                                                       #
# These functions have been created by Rob Ladendorf (rioted@gmail.com) #
#                                                                       #
#-----------------------------------------------------------------------#
function getsec()
{
	echo "\$SECONDS: ${SECONDS}"
}
function search()
{
	firefox -search "${argv[@]}" # $[ARGC] "$@" &
}
function attempt()
{
	for i in $(seq 1 ${#aliases}); do echo -e ${(k)aliases:${i}:1} "\t\t" ${aliases:${i}:1}; done | nl
}
function date-printf()
{
	date --help | egrep -i "^(\ )?+\%" | esed 's/^(\ )?+//g'
}
function timealive()
{
	bc -l <<< "($(date +%s) - $(date --date="05/07/1992" +%s))"
}
function dweek()
{
	date +"DAY:%t%j%nWEEK:%t%W"
}
function dfcspace()
{
	dfc -p /dev/sda1 -u m -d | awk '/\/dev\//{ print $5 }'
}
function rmd()
{
	find . -depth -type d -exec rmdir {} \;
}
function mvmd()
{
	mkdir -p ${2}
	mv $1 -t $2
}
function nsyn() { ls -1 ~/.nano | cut -d . -f1 | grep -v -e Readme -e search_history -e Default ;}
function sa() { "$@" | awk '/Size/{ print $2/1024/1024"MB" }';}
function btusd()
{
	echo "$(date +%D\ %T)\n\$$(curl -s https://api.coindesk.com/v1/bpi/currentprice.json | jq ".bpi.USD.rate" | tr -d \" | tr -d , | cut -d "." -f1)"
}

function aliaschk()
{
	command -v "$@" | sed -r "s/(.*)['](.*)['](.*)/\2/g"
}

function aptls()
{
	sudo apt list 2>/dev/null | command grep installed | awk -F / '{ print $1 }'
}

function aptshowall()
{
	aptls=$(sudo apt list 2>/dev/null | command grep installed | awk -F / '{ print $1 }')
	echo $aptls | n-panelize && echo ${selected}
	#for i in $(awk -F / '{ print $1 }' <<< $(aptls)); do
	#	sudo apt show $i
	#done
}

function rmlns() # REMOVE ALL BLANK LINES
{
	grep -v "^$"
}

function ffind() # FIND (CASE INSENSITIVE) FROM ROOT EXCLUDING CYGDRIVE
{
	find / -xdev -depth | grep -i ${1}
}

function path()
{
	echo ${PATH} | sed 's/[:]/\n/g'
}
function btcusd() # GET COINBASE'S CURRENT VALUE OF BTC IN USD
{
	local DATE=$(date +%D' @ '%T)
	local LOCA="/usr/local/bin/bitcoin-prices-master/exchanges/Coinbase"
	echo -e "\n"$DATE"\n"
	bash -c ${LOCA}/api.sh && bash -c ${LOCA}/price.sh | read USD
	echo "$USD" | sed 's/.*/$& USD = 1 BTC/g'
	printf "\n"
}

# NEW FUNCTIONS FROM PASTEBIN

function wcn()
{
	wc "$@" | awk '{ print "\nFile: "$4"\n\n"$3,"Words\n"$2,"Bytes\n"$1,"Lines\n" }'
# $2,"Bytes\n"
# $1,"Newlines\n"
}
function hexer() # PRINTF THE HEXIT
{
	  printf "%s" $( hexit $1 )
}
function hexit() # CANONICAL SORTED HEXDUMP
{
	  hexdump -C $1 | awk '{ print $18 }' | sed 's/|//g' | sed 's|...||g'
}
function squareme()
{
	echo -e "\nThis function is used to square whatever number you input. Exit using Ctrl+D/Ctrl+C.\n\n"
	awk '{ x=$0**2; print "\n\t"$1"Â² = " x"\n" }' - 2>&1 /dev/null
}
function fetchme()
{
	echo "Uptime:"
	it=( $(uptime -p | awk '/Uptime/{ $1=$2=$3=$4=$5=""; print $6,$7 }' | sed 's/\x1b//g' | sed 's|\[0m||g' | grep -o '[[:digit:]]') )
	echo ${it[1]}${it[2]} hours ${it[3]}${it[4]} minutes
}
function calias()
{
	awk '{ print; } $NR % 1 == 0 { print ""; }' ~/.zsh_alias | less
}
function cfunc()
{
	awk '{ print; } $NR % 1 == 0 { print ""; }' ~/.zsh_functions | less
}
# MATH HELPERS
function calc() # AWK MATH BITCH
{
	awk "BEGIN{print $*}";
}
function math() # BETTER MATH FUNCTION (LONG DECIMAL ANSWERS)
{
	bc -l<<<"$@"
}
function maths() # MATH W/O LONG DECIMALS
{
	bc -l <<< "$@" | zz
}
function nix() # REMOVES ALL DECIMAL PLACES WHEN PIPING FROM MATH
{
	sed 's/.[[:digit:]]*$//g'
}
function zz() # LEAVES ONLY 3 DECIMAL PLACES WHEN PIPING FROM MATH
{
	sed 's/.................$//g'
}

# LS COMMANDS
function lsfunc()
{
	if [[ -n "$1" ]];
	then
		command grep -i ${1} < <(functions)
	else
		functions
	fi
	# grep -E 'function.*()' ~/.zsh_functions --color=never | sed 's/function //g' | grep -v lsfunc
}

function lsfa() # LIST ONLY HIDDEN FILES IN WD (NON-DIRS)
{
	find -L ${PWD} -type f -maxdepth 1 | sed 's@\./@@g'
	#command ls -A "$@" | grep '^[.]' | grep -v '/$' --color=never
}

function lsf() # LIST ONLY NON-HIDDEN NON-DIRS IN WD
{
	command ls --file-type "$@" | grep -v -e '/$' -e "@"
}

function lsfd() # LIST ONLY DIRS IN WD
{
	ls -F "$@" | command grep '/$'
}

function lsfad() # LIST ONLY HIDDEN DIRS IN WD
{
	ls -AF "$@" | grep '/$' | grep '^[.]' --color=never
}

function lsop() # USEFUL FOR SEARCHING FOR ALL BINARIES
{
	for i in $(printf "%s\n" ${PATH} | sed 's/[:]/\n/g'); do
		ls ${i} 2>/dev/null | sort -u | command egrep -i "${1}" 2>/dev/null
	done
}

function lsopman()
{
	for i in $(lsop $1); do man $i ; done
}

function lsc() # LIST NO. OF FILES (INCLUDING SYMBOLIC LINKS)
{
	ls -1 "$@" | wc -l
}

function lsca() # LIST NO. OF FILES (INCLUDING HIDDEN)
{
	ls -lA "$@" | wc -l
}

# FILE MODIFICATIONS
function bak()	# CREATES A BACKUP FILE FROM STDIN
{
	for i do
	   case ${i##*/} in
	     (?*.?*) cp -iv -- "$i" "${i%.*}.bak.${i##*.}";;
	     (*) cp -iv -- "$i" "$i.bak"
	   esac
	 done
}
function zmd() # MAKE EXECUTABLE ZSH SCRIPT
{
	echo "#!/bin/zsh" > $1.zsh
	chmod +x $1.zsh
}
function cmd() # MAKE EXECUTABLE SH SCRIPT
{
	echo "#!/bin/bash" > $1.sh
	chmod +x $1.sh
}
function npy()
{
	echo "2 or 3?"
	read -sk1 VAR
	case $VAR in
		2)
		echo "#!/usr/bin/env python2.7" >> $1.py
		;;
		3)
		echo "#!/usr/bin/env python3" >> $1.py
		;;
	esac
	chmod +x $1.py
}
function awkmk()
{
	echo "#!/usr/bin/env awk" >> $1.awk
	chmod +x $1.awk
}
function npl()
{
	echo "#!/usr/bin/perl" >> $1.pl
	chmod u+x $1.pl
}
function debak() # RIDS WD OF ALL .BAK FILES
{
	for file in *.bak ; do cp "$file" "${file//.bak}"; rm -iv *.bak; done
}
function cpext() # COPY A FILE WITH THE DATE IN THE TITLE IN WD
{
	local TIME=$(date +%m-%d)
	local EXT=$(ls $1 | grep -o '.[[:alpha:]]*$')
	cp $1 $(ls $1 | sed 's/.[[:alpha:]]*$//g')-$TIME$EXT
	command rm -iv $1
}
function cptime()
{
	local TIME=$(date +%m-%d)
	cp $1 $1-$TIME
	command rm -iv $1
}
function linetotal() # GET TOTAL NUM OF LINES IN A FILE
{
	gawk '{ nlines++ }  END  { print nlines }'
}
function sp_ce() # REPLACE SPACES IN FILENAMES WITH _
{
	for f in *\ *; do mv "$f" "${f// /_}"; done
}
function sp-ce() # REPLACE SPACES IN FILENAMES WITH -
{
	for f in *\ *; do mv "$f" "${f// /-}"; done
}

# XDOTOOL SHORTCUTS

function nbash() # OPEN A NEW TAB IN BASH. (XDT)
{
	 xdotool key ctrl+shift+t
	 xdotool keyup ctrl+shift+t
	 xdotool type bash
	 xdotool keydown Return
	 xdotool keyup Return
	 xdotool type clear
	 xdotool key Return
	 xdotool keyup Return
}

# INFORMATION ON USEFUL TERMINAL SHORTCUTS AND FUNCTION INFORMATION

function bcuts() # LISTS COMMON TERMINAL SHORTCUTS
{
	cat /home/rob/Documents/PC-Info+Help/LinuxFiles/LinuxConfig/Shortcuts/cmdkeycuts.txt
}

# SYSTEM SHORTCUTS

function cdls() # CHANGE TO A DIRECTORY AND LIST ITS CONTENTS
{
	cd "$@"; ls
}
function cd-up() # MOVE UP THE NUMBER OF DIRS LISTED IN $1
{
	cd $(printf "%0.0s../" $(seq 1 $1))
}
function mdcd() # MAKE A DIRECTORY AND MOVE TO IT, ALSO CREATING SUBDIRECTORIES ON THE WAY
{
	mkdir -p $1 && mkdir -p $1 && cd $1
}
# MONITOR BRIGHTNESS
function slx() # CHANGE BRIGHTNESS (SLX 1-9)
{
	xrandr --output eDP1 --brightness $1.$2
}
# PROCESS RELATED
function my_ps() # GET PROCESSES THE USER STARTED
{
	ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command
}
function pp() # PICK A PROCESS FROM MY_PS
{
	local TITLE=$(ps -o pid,%cpu,%mem,bsdtime,command | head -1)
	echo ${TITLE}
	my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"}
}
# ARCHIVE FUNCTIONS
# RECURSIVE TARGZ+ZIP COMMANDS FOR FOLDERS
function maketar()
{
	   tar cvzf "${1%%/}.tar.gz"  "${1%%/}/";
}
function makezip()
{
	   zip -r "${1%%/}.zip" "$1" ;
}
# EXTRACTION (.tar.bz2, .tar.gz, .bz2, .rar, .gz, .tar, .tbz2, .tgz, .zip, .Z, .7z)
function exx () # EXTRACT ALMOST ANY ARCHIVE FILE
{
	 if [ -f $1 ] ; then
	   case $1 in
	     *.tar.bz2)   tar xjf $1   ;;
	     *.tar.gz)    tar xzf $1   ;;
	     *.bz2)       bunzip2 $1   ;;
	     *.rar)       unrar x $1   ;;
	     *.gz)        gunzip $1    ;;
	     *.tar)       tar xf $1    ;;
	     *.tbz2)      tar xjf $1   ;;
	     *.tgz)       tar xzf $1   ;;
	     *.zip)       unzip $1     ;;
	     *.Z)         aunpack $1   ;;
	     *.7z)        7z x $1      ;;
	     *)           echo "'$1' cannot be extracted via ex()" ;;
	   esac
	 else
	   echo "'$1' is not a valid file"
	 fi
}

# 7ZIP mc7z mx7z
function mc7z() # MAKE A HIGHLY-COMPRESSED TAR.7Z ARCHIVE
{
	tar cf - $1.tar $1 | 7za a -t7z -si -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on $1.tar.7z
}
function mx7z() # EXTRACT A TAR.7Z ARCHIVE
{
	FILENAME=$1.tar;
	7za x $FILENAME.7z;
	tar -xvf $FILENAME ; rm -f $FILENAME
}
# TARGZ targz targzadd targzo
function targzadd() # ADD STDIN FILE TO TAR.GZ ARCHIVE
{
	gunzip $1.tar.gz
	tar -rvf $1.tar $2
	tar -tvf $1.tar
	gzip $1.tar
}
function targz() # CREATE TARGZ ARCHIVE FROM STDIN
{
	tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"
}
# ZIP zipit
function zipit() # CREATE ZIP ARCHIVE FROM STDIN
{
	zip -r "${1%%/}.zip" "$1"
}
# CPIO cpuse cpfind cpiowd cpiols cpview cpioex cpiowdex
function cpuse() # DESCRIBES HOW TO USE FIND WITH CPIO
{
	echo 'Usage is like this: find 'LOCATION' -(i)name "*.extension" | cpio -o > ARCHIVE.cpio'
	echo 'This will find all files starting from the LOCATION dir that use the extension and add them to a .cpio archive.'
	#find /home/shambi07/ -iname $1 | cpio -o > $2.cpio
}

# GET SUM OF FILE CONTENTS (psumof, sumof)

function psumof() # PERLS SUM OF ALL NUMBERS IN A FILE
{
	perl -nle '$sum += $_ } END { print $sum' $1
}
function sumof() # SUM USING AWK
{
	awk '{sum+=$0} END {print sum}' $1
}

# Colors for commands
Black="\e[0;30m"
Red="\e[0;31m"
Green="\e[0;32m"
Yellow="\e[0;33m"
Blue="\e[0;34m"
Purple="\e[0;35m"
Cyan="\e[0;36m"
White="\e[0;37m"

BBlack="\e[1;30m"
BRed="\e[1;31m"
BGreen="\e[1;32m"
BYellow="\e[1;33m"
BBlue="\e[1;34m"
BPurple="\e[1;35m"
BCyan="\e[1;36m"
BWhite="\e[1;37m"

On_Black="\e[40m"
On_Red="\e[41m"
On_Green="\e[42m"
On_Yellow="\e[43m"
On_Blue="\e[44m"
On_Purple="\e[45m"
On_Cyan="\e[46m"
On_White="\e[47m"
NC="\e[m"

function apt-installed() { grep " install" /var/log/dpkg.log | less ;}
function battery-notification() { zenity --notification --text="$(batt)" ;}
function statformat() { man stat | grep "%" ;}
function get2() { egrep "^(\ |\t)+2"; }
function sd() { sed -r 's/^(\ |\t)+//g' ;}
function iwscan() { sudo iw dev wlo1 scan ;}
function anf() { awk '{ print $NF }' ;}
function hexsed() { echo $(xxd $1 | awk '{ print $NF }' | sed 's/\.//g;/^$/d') ;}
function getargs() { man $1 | egrep "^[[:space:]]+\-[[:alpha:]]" ;}
function chess-notation() { esed 's/([[:digit:]]{1,2}\.)/\n\1/g' $@ ;}
